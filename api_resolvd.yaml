swagger: '2.0'
info:
  version: 0.1.0
  title: Resolvd API
tags:
- name: user
  description: Operations about users
- name: forecasting
  description: Forecasting methods
- name: scheduling
  description: Scheduling methods  
paths:
  /test:
    get:
      tags:
      - user
      summary: welcome API
      description: Check if the WS are running
      operationId: testWS
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: successful operation  
          schema:
            $ref: '#/definitions/Message1'          
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUserDB
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation        
  /user/{id}:
    get:
      tags:
      - user
      description: |-
       **[Authentication required]** restricted to *building_manager* and *module_data_provider* roles
      summary: Creates list of users with given input array
      operationId: getInfoUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        description: user identifier
        required: true
        type: string
        format: string
      responses:
        default:
          description: successful operation
    delete:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        description: user identifier
        required: true
        type: string
        format: string
      responses:
        default:
          description: successful operation
    put:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: updateUserDB
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: user identifier
        required: true
        type: string
        format: string
      responses:
        default:
          description: successful operation            
  /token:
    get:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createToken
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /admin/user:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: adminUsers
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        400:
          description: Invalid username/password supplied          
  /users:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: listUsers
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        400:
          description: Invalid username/password supplied          
  /user/{id}/activate:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: activateUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        description: The name that needs to be fetched. Use user1 for testing. 
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found  
  /user/{id}/send_activation_link:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: sendActivationLink
      produces:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        description: The name that needs to be fetched. Use user1 for testing. 
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found 
  /energy_forecaster/models:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getModels
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing. 
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found           
  /energy_forecaster/energy_forecast_next_24hours_train:
    put:
      tags:
      - forecasting
      summary: Update an existing pet
      operationId: forecastTrain24h
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Pet object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
        405:
          description: Validation exception
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /energy_forecaster/energy_forecast_day_ahead_train:
    put:
      tags:
      - forecasting
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: forecastTrainDayAhead
      produces:
      - application/json
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
          enum:
          - available
          - pending
          - sold
          default: available
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: Invalid status value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /energy_forecaster/energy_forecast_next_1h_train:
    put:
      tags:
      - forecasting
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing.
      operationId: forecastTrain1h
      consumes:
      - application/json
      - multipart/form-data
      produces:
      - application/json
      - application/xml
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        type: array
        items:
          type: string
        collectionFormat: multi
      - name: name2
        in: path
        description: ID of pet that needs to be updated
        required: true
        type: integer
        format: int64
      - name: name
        in: formData
        description: Updated name of the pet
        required: false
        type: string
      - name: status
        in: formData
        description: Updated status of the pet
        required: false
        type: string        
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: Invalid tag value
      security:
      - api_key: []
  /energy_forecaster/energy_forecast_next_24hours:
    post:
      tags:
      - forecasting
      summary: Updates a pet in the store with form data
      operationId: forecastNext24h
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - application/xml

      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets        
  /energy_forecaster/energy_forecast_day_ahead:
    post:
      tags:
      - forecasting
      summary: Updates a pet in the store with form data
      operationId: forecastDayAhead
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - application/xml

      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets 
  /energy_forecaster/energy_forecast_next_1hour:
    post:
      tags:
      - forecasting
      summary: Updates a pet in the store with form data
      operationId: forecastNextHour
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - application/xml

      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets 
  /energy_forecaster/critical_event_forecast:
    post:
      tags:
      - forecasting
      summary: Updates a pet in the store with form data
      operationId: criticalEventForecast
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - application/xml

      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets         
  /pet/{petId}/uploadImage:
    post:
      tags:
      - forecasting
      summary: uploads an image
      operationId: uploadFile
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: petId
        in: path
        description: ID of pet to update
        required: true
        type: integer
        format: int64
      - name: additionalMetadata
        in: formData
        description: Additional data to pass to server
        required: false
        type: string
      - name: file
        in: formData
        description: file to upload
        required: false
        type: file
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - petstore_auth:
        - write:pets
        - read:pets
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
        - placed
        - approved
        - delivered
      complete:
        type: boolean
        default: false
    xml:
      name: Order
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
  Message1:
    type: object
    required:
    - message
    properties:
      name:
        type: string
        example: this is a message
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      msg:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# host: virtserver.swaggerhub.com
basePath: /resolvd